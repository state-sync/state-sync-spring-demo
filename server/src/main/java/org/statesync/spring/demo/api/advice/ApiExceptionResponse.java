// Generated by delombok at Tue Jul 03 21:12:42 NOVT 2018
package org.statesync.spring.demo.api.advice;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;

public class ApiExceptionResponse {

	private class ExceptionResponseField {
		private final String error;
		private final String description;

		@java.lang.SuppressWarnings("all")
		public String getError() {
			return this.error;
		}

		@java.lang.SuppressWarnings("all")
		public String getDescription() {
			return this.description;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof ApiExceptionResponse.ExceptionResponseField)) return false;
			final ApiExceptionResponse.ExceptionResponseField other = (ApiExceptionResponse.ExceptionResponseField) o;
			if (!other.canEqual((java.lang.Object) this)) return false;
			final java.lang.Object this$error = this.getError();
			final java.lang.Object other$error = other.getError();
			if (this$error == null ? other$error != null : !this$error.equals(other$error)) return false;
			final java.lang.Object this$description = this.getDescription();
			final java.lang.Object other$description = other.getDescription();
			if (this$description == null ? other$description != null : !this$description.equals(other$description)) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof ApiExceptionResponse.ExceptionResponseField;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $error = this.getError();
			result = result * PRIME + ($error == null ? 43 : $error.hashCode());
			final java.lang.Object $description = this.getDescription();
			result = result * PRIME + ($description == null ? 43 : $description.hashCode());
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "ApiExceptionResponse.ExceptionResponseField(error=" + this.getError() + ", description=" + this.getDescription() + ")";
		}

		@java.lang.SuppressWarnings("all")
		public ExceptionResponseField(final String error, final String description) {
			this.error = error;
			this.description = description;
		}
	}

	private final int status;
	private final long timestamp;
	private final List<ExceptionResponseField> errors = new ArrayList<>();

	ApiExceptionResponse(final HttpStatus httpStatus, final BindingResult bindingResult, final MessageSource messageSource) {
		this.timestamp = Instant.now().toEpochMilli();
		this.status = httpStatus.value();
		for (final FieldError error : bindingResult.getFieldErrors()) {
			final String message = error.getDefaultMessage();
			this.errors.add(new ExceptionResponseField(message, messageSource.getMessage(message, null, LocaleContextHolder.getLocale())));
		}
		for (final ObjectError error : bindingResult.getGlobalErrors()) {
			final String message = error.getDefaultMessage();
			this.errors.add(new ExceptionResponseField(message, messageSource.getMessage(message, null, LocaleContextHolder.getLocale())));
		}
		this.errors.sort(Comparator.comparing(ExceptionResponseField::getError));
	}

	ApiExceptionResponse(final HttpStatus httpStatus, final String field, final String description) {
		this.timestamp = Instant.now().toEpochMilli();
		this.status = httpStatus.value();
		this.errors.add(new ExceptionResponseField(field, description));
	}

	@java.lang.SuppressWarnings("all")
	public int getStatus() {
		return this.status;
	}

	@java.lang.SuppressWarnings("all")
	public long getTimestamp() {
		return this.timestamp;
	}

	@java.lang.SuppressWarnings("all")
	public List<ExceptionResponseField> getErrors() {
		return this.errors;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ApiExceptionResponse)) return false;
		final ApiExceptionResponse other = (ApiExceptionResponse) o;
		if (!other.canEqual((java.lang.Object) this)) return false;
		if (this.getStatus() != other.getStatus()) return false;
		if (this.getTimestamp() != other.getTimestamp()) return false;
		final java.lang.Object this$errors = this.getErrors();
		final java.lang.Object other$errors = other.getErrors();
		if (this$errors == null ? other$errors != null : !this$errors.equals(other$errors)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ApiExceptionResponse;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + this.getStatus();
		final long $timestamp = this.getTimestamp();
		result = result * PRIME + (int) ($timestamp >>> 32 ^ $timestamp);
		final java.lang.Object $errors = this.getErrors();
		result = result * PRIME + ($errors == null ? 43 : $errors.hashCode());
		return result;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "ApiExceptionResponse(status=" + this.getStatus() + ", timestamp=" + this.getTimestamp() + ", errors=" + this.getErrors() + ")";
	}

	@java.lang.SuppressWarnings("all")
	public ApiExceptionResponse(final int status, final long timestamp) {
		this.status = status;
		this.timestamp = timestamp;
	}
}
